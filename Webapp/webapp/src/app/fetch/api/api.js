"use strict";
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Security Trader API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0-SNAPSHOT
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoutesApi = exports.RoutesApiFactory = exports.RoutesApiFp = exports.RoutesApiFetchParamCreator = exports.WSMessageType = exports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = void 0;
var url = require("url");
var portableFetch = require("portable-fetch");
var BASE_PATH = "/".replace(/\/+$/, "");
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
var BaseAPI = /** @class */ (function () {
    function BaseAPI(configuration, basePath, fetch) {
        if (basePath === void 0) { basePath = BASE_PATH; }
        if (fetch === void 0) { fetch = portableFetch; }
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
var RequiredError = /** @class */ (function (_super) {
    __extends(RequiredError, _super);
    function RequiredError(field, msg) {
        var _this = _super.call(this, msg) || this;
        _this.field = field;
        return _this;
    }
    return RequiredError;
}(Error));
exports.RequiredError = RequiredError;
/**
 *
 * @export
 * @enum {string}
 */
var WSMessageType;
(function (WSMessageType) {
    WSMessageType[WSMessageType["CreateGame"] = 'CreateGame'] = "CreateGame";
    WSMessageType[WSMessageType["JoinGame"] = 'JoinGame'] = "JoinGame";
    WSMessageType[WSMessageType["BroadcastMessage"] = 'BroadcastMessage'] = "BroadcastMessage";
    WSMessageType[WSMessageType["InboxMessage"] = 'InboxMessage'] = "InboxMessage";
    WSMessageType[WSMessageType["PingMessage"] = 'PingMessage'] = "PingMessage";
    WSMessageType[WSMessageType["PongMessage"] = 'PongMessage'] = "PongMessage";
})(WSMessageType = exports.WSMessageType || (exports.WSMessageType = {}));
/**
 * RoutesApi - fetch parameter creator
 * @export
 */
exports.RoutesApiFetchParamCreator = function (configuration) {
    return {
        /**
         * User can create an Account by sending their username, password, email. If email is taken user account will not be created.
         * @summary Creates user account
         * @param {ModelsRestCreateRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling createUser.');
            }
            var localVarPath = "/auth/create";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ModelsRestCreateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the time and ip address of the server
         * @summary Gets status of server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        status: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/api/status";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * When providing a valid email and password the user will be able to log in to their account.
         * @summary Allows User to Log In
         * @param {ModelsRestLoginRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogin: function (body, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling userLogin.');
            }
            var localVarPath = "/auth/login";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("ModelsRestLoginRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * RoutesApi - functional programming interface
 * @export
 */
exports.RoutesApiFp = function (configuration) {
    return {
        /**
         * User can create an Account by sending their username, password, email. If email is taken user account will not be created.
         * @summary Creates user account
         * @param {ModelsRestCreateRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: function (body, options) {
            var localVarFetchArgs = exports.RoutesApiFetchParamCreator(configuration).createUser(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the time and ip address of the server
         * @summary Gets status of server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        status: function (options) {
            var localVarFetchArgs = exports.RoutesApiFetchParamCreator(configuration).status(options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * When providing a valid email and password the user will be able to log in to their account.
         * @summary Allows User to Log In
         * @param {ModelsRestLoginRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogin: function (body, options) {
            var localVarFetchArgs = exports.RoutesApiFetchParamCreator(configuration).userLogin(body, options);
            return function (fetch, basePath) {
                if (fetch === void 0) { fetch = portableFetch; }
                if (basePath === void 0) { basePath = BASE_PATH; }
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * RoutesApi - factory interface
 * @export
 */
exports.RoutesApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * User can create an Account by sending their username, password, email. If email is taken user account will not be created.
         * @summary Creates user account
         * @param {ModelsRestCreateRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: function (body, options) {
            return exports.RoutesApiFp(configuration).createUser(body, options)(fetch, basePath);
        },
        /**
         * Returns the time and ip address of the server
         * @summary Gets status of server
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        status: function (options) {
            return exports.RoutesApiFp(configuration).status(options)(fetch, basePath);
        },
        /**
         * When providing a valid email and password the user will be able to log in to their account.
         * @summary Allows User to Log In
         * @param {ModelsRestLoginRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogin: function (body, options) {
            return exports.RoutesApiFp(configuration).userLogin(body, options)(fetch, basePath);
        },
    };
};
/**
 * RoutesApi - object-oriented interface
 * @export
 * @class RoutesApi
 * @extends {BaseAPI}
 */
var RoutesApi = /** @class */ (function (_super) {
    __extends(RoutesApi, _super);
    function RoutesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * User can create an Account by sending their username, password, email. If email is taken user account will not be created.
     * @summary Creates user account
     * @param {ModelsRestCreateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutesApi
     */
    RoutesApi.prototype.createUser = function (body, options) {
        return exports.RoutesApiFp(this.configuration).createUser(body, options)(this.fetch, this.basePath);
    };
    /**
     * Returns the time and ip address of the server
     * @summary Gets status of server
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutesApi
     */
    RoutesApi.prototype.status = function (options) {
        return exports.RoutesApiFp(this.configuration).status(options)(this.fetch, this.basePath);
    };
    /**
     * When providing a valid email and password the user will be able to log in to their account.
     * @summary Allows User to Log In
     * @param {ModelsRestLoginRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutesApi
     */
    RoutesApi.prototype.userLogin = function (body, options) {
        return exports.RoutesApiFp(this.configuration).userLogin(body, options)(this.fetch, this.basePath);
    };
    return RoutesApi;
}(BaseAPI));
exports.RoutesApi = RoutesApi;
